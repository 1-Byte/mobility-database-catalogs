name: Store latest datasets cronjob

on:
  schedule:
    - cron: "0 0 * * *"

jobs:
  get-urls:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install wheel numpy
      - name: Create URLs matrix with the auto-discovery and latest URLs
        shell: python
        run: |
          import os
          import json
          import numpy as np

          # OS constants
          ROOT = os.getcwd()
          GTFS_SCHEDULE_CATALOG_PATH_FROM_ROOT = "catalogs/sources/gtfs/schedule"
          MATRIX_FILE = "urls_matrix.json"

          # File constants
          URLS = "urls"
          AUTO_DISCOVERY = "auto_discovery"
          LATEST = "latest"

          # Github constants
          MAX_JOB_NUMBER = 256

          # Matrix constants
          INCLUDE = "include"
          DATA = "data"
          BASE = "base"

          # Report constants
          GET_URLS_REPORT = "get_urls_report.txt"

          files = os.listdir(os.path.join(ROOT, GTFS_SCHEDULE_CATALOG_PATH_FROM_ROOT))

          urls = {}
          for file in files:
              base = os.path.splitext(os.path.basename(file))[0]
              with open(os.path.join(ROOT, GTFS_SCHEDULE_CATALOG_PATH_FROM_ROOT, file), "r") as fp:
                  file_json = json.load(fp)
                  auto_discovery_url = file_json.get(URLS, {}).get(AUTO_DISCOVERY)
                  latest_url = file_json.get(URLS, {}).get(LATEST)
                  if auto_discovery_url is None or latest_url is None:
                      file_log = (
                          f"{base}: FAILURE! Auto-discovery URL is {auto_discovery_url} and latest URL is {latest_url}. "
                          f"Both URLS must be defined to update the source latest URL.\n"
                      )
                  else:
                      urls[base] = {AUTO_DISCOVERY: auto_discovery_url, LATEST: latest_url}
                      file_log = (
                          f"{base}: SUCCESS! Both auto-discovery and latest URLs were fetched.\n"
                      )
                  with open(GET_URLS_REPORT, "a") as fp:
                      fp.write(file_log)

          urls_data = []
          jobs = np.array_split(list(urls.keys()), min(MAX_JOB_NUMBER, len(list(urls.keys()))))
          jobs = [list(job) for job in jobs]
          for job in jobs:
              urls_data_string = ""
              while len(job) > 0:
                  file_base = job.pop()
                  file_information = {
                      BASE: file_base,
                      AUTO_DISCOVERY: urls[file_base][AUTO_DISCOVERY],
                      LATEST: urls[file_base][LATEST]
                  }
                  urls_data_string = urls_data_string + json.dumps(
                      file_information, separators=(",", ":")
                  )
              job_data = {DATA: urls_data_string.replace("}{", "} {")}
              urls_data.append(job_data)
          matrix_data = {INCLUDE: urls_data}

          with open(os.path.join(ROOT, MATRIX_FILE), "w") as fp:
              file_json = json.dump(matrix_data, fp)
      - name: Set URLs matrix
        id: set-matrix
        run: |
          DATASETS=$(jq . ./urls_matrix.json -c)
          echo $DATASETS
          echo "::set-output name=matrix::$DATASETS"
      - name: Persist URLs matrix artifact
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: urls_matrix
          path: ./urls_matrix.json
      - name: Persist Get URLS report artifact
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: get_urls_report
          path: ./get_urls_report.txt
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
  download-datasets:
    needs: [ get-urls ]
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.get-urls.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest wheel numpy
          sudo add-apt-repository ppa:ubuntugis/ubuntugis-unstable
          sudo apt-get update
          sudo apt-get install gdal-bin python3-gdal
          sudo apt-get install libgdal-dev
          pip install GDAL==$(gdal-config --version) --global-option=build_ext --global-option="-I/usr/include/gdal"
          sudo apt-get install libspatialindex-dev
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Validate and download the datasets
        shell: python
        run: |
          import os
          import json
          import gtfs_kit
          import requests

          # OS constants
          ROOT = os.getcwd()
          DATASETS = "datasets"

          # Jobs constants
          BASE = "base"
          AUTO_DISCOVERY = "auto_discovery"

          # Report constants
          DOWNLOAD_DATASETS_REPORT = "download_datasets_report.txt"

          jobs = """${{ matrix.data }}""".split()
          for job in jobs:
              job_json = json.loads(job)
              base = job_json[BASE]
              url = job_json[AUTO_DISCOVERY]

              # Make sure that the dataset is a readable GTFS Schedule dataset
              is_readable = True
              try:
                  gtfs_kit.read_feed(url, dist_units="km")
              except Exception as e:
                  is_readable = False
                  file_log = (
                      f"{base}: FAILURE! Exception {e} found while parsing the GTFS dataset with the GTFS kit library. "
                      f"The dataset must be a valid GTFS zip file or URL.\n"
                  )

              # Download the dataset
              if is_readable:
                  zip_path = os.path.join(ROOT, DATASETS, f"{base}.zip")
                  os.makedirs(os.path.dirname(zip_path), exist_ok=True)
                  is_downloadable = True
                  try:
                      zip_file_req = requests.get(url, allow_redirects=True)
                      zip_file_req.raise_for_status()
                  except Exception as e:
                      is_downloadable = False
                      file_log = (
                          f"{base}: FAILURE! Exception {e} occurred when downloading URL {url}.\n"
                      )

                  if is_downloadable:
                      zip_file = zip_file_req.content
                      with open(zip_path, "wb") as f:
                          f.write(zip_file)
                      file_log = (
                          f"{base}: SUCCESS! A readable GTFS dataset was downloaded.\n"
                      )
              with open(DOWNLOAD_DATASETS_REPORT, "a") as fp:
                  fp.write(file_log)
      - name: Persist datasets artifact
        uses: actions/upload-artifact@v2
        with:
          name: datasets
          path: datasets
      - name: Persist Download datasets report artifact
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: download_datasets_report
          path: ./download_datasets_report.txt
  store-datasets:
    needs: [ download-datasets ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Download datasets artifact
        uses: actions/download-artifact@master
        with:
          name: datasets
          path: datasets
      - name: Set up and authorize Cloud
        uses: google-github-actions/auth@v0
        with:
          credentials_json: ${{ secrets.ARCHIVE_DATASET_SA_KEY }}
      - name: Upload datasets to Google Cloud Storage
        id: upload-datasets
        uses: google-github-actions/upload-cloud-storage@main
        with:
          path: datasets
          destination: mdb-latest
          parent: false
  validate-latest:
    needs: [ get-urls, store-datasets ]
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.get-urls.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest wheel numpy
          sudo add-apt-repository ppa:ubuntugis/ubuntugis-unstable
          sudo apt-get update
          sudo apt-get install gdal-bin python3-gdal
          sudo apt-get install libgdal-dev
          pip install GDAL==$(gdal-config --version) --global-option=build_ext --global-option="-I/usr/include/gdal"
          sudo apt-get install libspatialindex-dev
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Validate the latest datasets
        shell: python
        run: |
          import os
          import json
          import gtfs_kit
          import requests

          # Jobs constants
          BASE = "base"
          LATEST = "latest"

          # Report constants
          VALIDATE_LATEST_REPORT = "validate_latest_report.txt"

          jobs = """${{ matrix.data }}""".split()
          for job in jobs:
              job_json = json.loads(job)
              base = job_json[BASE]
              url = job_json[LATEST]

              # Make sure that the uploaded latest dataset is a readable GTFS Schedule dataset
              try:
                  gtfs_kit.read_feed(url, dist_units="km")
                  file_log = (
                      f"{base}: SUCCESS! The latest dataset is a readable GTFS dataset.\n"
                  )
              except Exception as e:
                  file_log = (
                      f"{base}: FAILURE! Exception {e} found while parsing the GTFS dataset with the GTFS kit library. "
                      f"The dataset must be a valid GTFS zip file or URL.\n"
                  )
              with open(VALIDATE_LATEST_REPORT, "a") as fp:
                  fp.write(file_log)
      - name: Persist Validate latest datasets report artifact
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: validate_latest_report
          path: ./validate_latest_report.txt
