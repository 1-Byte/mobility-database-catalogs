name: Store latest datasets on approval

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  get-urls:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ 3.9 ]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install wheel numpy
      - name: Get added and modified files
        id: files
        uses: jitterbit/get-changed-files@v1
      - name: Create URLs matrix with the auto-discovery and latest URLs
        shell: python
        run: |
          import os
          import json
          import numpy as np

          # OS constants
          ROOT = os.getcwd()
          GTFS_SCHEDULE_CATALOG_PATH_FROM_ROOT = "catalogs/sources/gtfs/schedule"
          MATRIX_FILE = "urls_matrix.json"

          # File constants
          URLS = "urls"
          AUTO_DISCOVERY = "auto_discovery"
          LATEST = "latest"

          # Github constants
          MAX_JOB_NUMBER = 256

          # Matrix constants
          INCLUDE = "include"
          DATA = "data"
          BASE = "base"

          changed_files = "${{ steps.files.outputs.all }}".split()
          changed_files = [file for file in changed_files if GTFS_SCHEDULE_CATALOG_PATH_FROM_ROOT in file]

          urls = {}
          for file in changed_files:
              base = os.path.splitext(os.path.basename(file))[0]
              with open(os.path.join(ROOT, file), "r") as fp:
                  file_json = json.load(fp)
                  auto_discovery_url = file_json.get(URLS, {}).get(AUTO_DISCOVERY)
                  latest_url = file_json.get(URLS, {}).get(LATEST)
                  if auto_discovery_url is None:
                      raise ValueError(f"File {file} is missing its auto-discovery url.")
                  if latest_url is None:
                      raise ValueError(f"File {file} is missing its latest url.")
                  urls[base] = {AUTO_DISCOVERY: auto_discovery_url, LATEST: latest_url}

          urls_data = []
          jobs = np.array_split(list(urls.keys()), min(MAX_JOB_NUMBER, len(list(urls.keys()))))
          jobs = [list(job) for job in jobs]
          for job in jobs:
              urls_data_string = ""
              while len(job) > 0:
                  file_base = job.pop()
                  file_information = {
                      BASE: file_base,
                      AUTO_DISCOVERY: urls[file_base][AUTO_DISCOVERY],
                      LATEST: urls[file_base][LATEST]
                  }
                  urls_data_string = urls_data_string + json.dumps(
                      file_information, separators=(",", ":")
                  )
              job_data = {DATA: urls_data_string.replace("}{", "} {")}
              urls_data.append(job_data)
          matrix_data = {INCLUDE: urls_data}

          with open(os.path.join(ROOT, MATRIX_FILE), "w") as fp:
              file_json = json.dump(matrix_data, fp)
      - name: Set URLs matrix
        id: set-matrix
        run: |
          DATASETS=$(jq . ./urls_matrix.json -c)
          echo $DATASETS
          echo "::set-output name=matrix::$DATASETS"
      - name: Persist URLs matrix artifact
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: urls_matrix
          path: ./urls_matrix.json
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
  store-datasets:
    needs: [ gets-urls ]
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.gets-urls.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest wheel numpy
          sudo add-apt-repository ppa:ubuntugis/ubuntugis-unstable
          sudo apt-get update
          sudo apt-get install gdal-bin python3-gdal
          sudo apt-get install libgdal-dev
          pip install GDAL==$(gdal-config --version) --global-option=build_ext --global-option="-I/usr/include/gdal"
          sudo apt-get install libspatialindex-dev
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Echo URLs matrix
        run: |
          echo ${{ matrix.data }}